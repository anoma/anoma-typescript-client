// source: nock/run.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var nock_input_pb = require('../nock/input_pb.js');
goog.object.extend(proto, nock_input_pb);
var node_info_pb = require('../node_info_pb.js');
goog.object.extend(proto, node_info_pb);
var nock_result_pb = require('../nock/result_pb.js');
goog.object.extend(proto, nock_result_pb);
goog.exportSymbol('proto.Anoma.Protobuf.Nock.Run.Request', null, global);
goog.exportSymbol('proto.Anoma.Protobuf.Nock.Run.Request.ProgramCase', null, global);
goog.exportSymbol('proto.Anoma.Protobuf.Nock.Run.Response', null, global);
goog.exportSymbol('proto.Anoma.Protobuf.Nock.Run.Response.ResultCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Anoma.Protobuf.Nock.Run.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Anoma.Protobuf.Nock.Run.Request.repeatedFields_, proto.Anoma.Protobuf.Nock.Run.Request.oneofGroups_);
};
goog.inherits(proto.Anoma.Protobuf.Nock.Run.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Anoma.Protobuf.Nock.Run.Request.displayName = 'proto.Anoma.Protobuf.Nock.Run.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Anoma.Protobuf.Nock.Run.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Anoma.Protobuf.Nock.Run.Response.oneofGroups_);
};
goog.inherits(proto.Anoma.Protobuf.Nock.Run.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Anoma.Protobuf.Nock.Run.Response.displayName = 'proto.Anoma.Protobuf.Nock.Run.Response';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Anoma.Protobuf.Nock.Run.Request.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Anoma.Protobuf.Nock.Run.Request.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.Anoma.Protobuf.Nock.Run.Request.ProgramCase = {
  PROGRAM_NOT_SET: 0,
  JAMMED_PROGRAM: 2,
  TEXT_PROGRAM: 3
};

/**
 * @return {proto.Anoma.Protobuf.Nock.Run.Request.ProgramCase}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.getProgramCase = function() {
  return /** @type {proto.Anoma.Protobuf.Nock.Run.Request.ProgramCase} */(jspb.Message.computeOneofCase(this, proto.Anoma.Protobuf.Nock.Run.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.Anoma.Protobuf.Nock.Run.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Anoma.Protobuf.Nock.Run.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Anoma.Protobuf.Nock.Run.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
nodeInfo: (f = msg.getNodeInfo()) && node_info_pb.NodeInfo.toObject(includeInstance, f),
jammedProgram: msg.getJammedProgram_asB64(),
textProgram: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    nock_input_pb.Input.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request}
 */
proto.Anoma.Protobuf.Nock.Run.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Anoma.Protobuf.Nock.Run.Request;
  return proto.Anoma.Protobuf.Nock.Run.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Anoma.Protobuf.Nock.Run.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request}
 */
proto.Anoma.Protobuf.Nock.Run.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new node_info_pb.NodeInfo;
      reader.readMessage(value,node_info_pb.NodeInfo.deserializeBinaryFromReader);
      msg.setNodeInfo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJammedProgram(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextProgram(value);
      break;
    case 4:
      var value = new nock_input_pb.Input;
      reader.readMessage(value,nock_input_pb.Input.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Anoma.Protobuf.Nock.Run.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Anoma.Protobuf.Nock.Run.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Anoma.Protobuf.Nock.Run.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      node_info_pb.NodeInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      nock_input_pb.Input.serializeBinaryToWriter
    );
  }
};


/**
 * optional Anoma.Protobuf.NodeInfo node_info = 1;
 * @return {?proto.Anoma.Protobuf.NodeInfo}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.getNodeInfo = function() {
  return /** @type{?proto.Anoma.Protobuf.NodeInfo} */ (
    jspb.Message.getWrapperField(this, node_info_pb.NodeInfo, 1));
};


/**
 * @param {?proto.Anoma.Protobuf.NodeInfo|undefined} value
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request} returns this
*/
proto.Anoma.Protobuf.Nock.Run.Request.prototype.setNodeInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request} returns this
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.clearNodeInfo = function() {
  return this.setNodeInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.hasNodeInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes jammed_program = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.getJammedProgram = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes jammed_program = 2;
 * This is a type-conversion wrapper around `getJammedProgram()`
 * @return {string}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.getJammedProgram_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJammedProgram()));
};


/**
 * optional bytes jammed_program = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJammedProgram()`
 * @return {!Uint8Array}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.getJammedProgram_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJammedProgram()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request} returns this
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.setJammedProgram = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.Anoma.Protobuf.Nock.Run.Request.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request} returns this
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.clearJammedProgram = function() {
  return jspb.Message.setOneofField(this, 2, proto.Anoma.Protobuf.Nock.Run.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.hasJammedProgram = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string text_program = 3;
 * @return {string}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.getTextProgram = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request} returns this
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.setTextProgram = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.Anoma.Protobuf.Nock.Run.Request.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request} returns this
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.clearTextProgram = function() {
  return jspb.Message.setOneofField(this, 3, proto.Anoma.Protobuf.Nock.Run.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.hasTextProgram = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Anoma.Protobuf.Nock.Input inputs = 4;
 * @return {!Array<!proto.Anoma.Protobuf.Nock.Input>}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.Anoma.Protobuf.Nock.Input>} */ (
    jspb.Message.getRepeatedWrapperField(this, nock_input_pb.Input, 4));
};


/**
 * @param {!Array<!proto.Anoma.Protobuf.Nock.Input>} value
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request} returns this
*/
proto.Anoma.Protobuf.Nock.Run.Request.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Anoma.Protobuf.Nock.Input=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Anoma.Protobuf.Nock.Input}
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Anoma.Protobuf.Nock.Input, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Request} returns this
 */
proto.Anoma.Protobuf.Nock.Run.Request.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Anoma.Protobuf.Nock.Run.Response.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Anoma.Protobuf.Nock.Run.Response.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS: 1,
  ERROR: 2
};

/**
 * @return {proto.Anoma.Protobuf.Nock.Run.Response.ResultCase}
 */
proto.Anoma.Protobuf.Nock.Run.Response.prototype.getResultCase = function() {
  return /** @type {proto.Anoma.Protobuf.Nock.Run.Response.ResultCase} */(jspb.Message.computeOneofCase(this, proto.Anoma.Protobuf.Nock.Run.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Anoma.Protobuf.Nock.Run.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Anoma.Protobuf.Nock.Run.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Anoma.Protobuf.Nock.Run.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Anoma.Protobuf.Nock.Run.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
success: (f = msg.getSuccess()) && nock_result_pb.Success.toObject(includeInstance, f),
error: (f = msg.getError()) && nock_result_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Response}
 */
proto.Anoma.Protobuf.Nock.Run.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Anoma.Protobuf.Nock.Run.Response;
  return proto.Anoma.Protobuf.Nock.Run.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Anoma.Protobuf.Nock.Run.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Response}
 */
proto.Anoma.Protobuf.Nock.Run.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nock_result_pb.Success;
      reader.readMessage(value,nock_result_pb.Success.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new nock_result_pb.Error;
      reader.readMessage(value,nock_result_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Anoma.Protobuf.Nock.Run.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Anoma.Protobuf.Nock.Run.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Anoma.Protobuf.Nock.Run.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Anoma.Protobuf.Nock.Run.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nock_result_pb.Success.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      nock_result_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Anoma.Protobuf.Nock.Success success = 1;
 * @return {?proto.Anoma.Protobuf.Nock.Success}
 */
proto.Anoma.Protobuf.Nock.Run.Response.prototype.getSuccess = function() {
  return /** @type{?proto.Anoma.Protobuf.Nock.Success} */ (
    jspb.Message.getWrapperField(this, nock_result_pb.Success, 1));
};


/**
 * @param {?proto.Anoma.Protobuf.Nock.Success|undefined} value
 * @return {!proto.Anoma.Protobuf.Nock.Run.Response} returns this
*/
proto.Anoma.Protobuf.Nock.Run.Response.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Anoma.Protobuf.Nock.Run.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Response} returns this
 */
proto.Anoma.Protobuf.Nock.Run.Response.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Anoma.Protobuf.Nock.Run.Response.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Anoma.Protobuf.Nock.Error error = 2;
 * @return {?proto.Anoma.Protobuf.Nock.Error}
 */
proto.Anoma.Protobuf.Nock.Run.Response.prototype.getError = function() {
  return /** @type{?proto.Anoma.Protobuf.Nock.Error} */ (
    jspb.Message.getWrapperField(this, nock_result_pb.Error, 2));
};


/**
 * @param {?proto.Anoma.Protobuf.Nock.Error|undefined} value
 * @return {!proto.Anoma.Protobuf.Nock.Run.Response} returns this
*/
proto.Anoma.Protobuf.Nock.Run.Response.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Anoma.Protobuf.Nock.Run.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Anoma.Protobuf.Nock.Run.Response} returns this
 */
proto.Anoma.Protobuf.Nock.Run.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Anoma.Protobuf.Nock.Run.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.Anoma.Protobuf.Nock.Run);
